{"version":3,"sources":["components/Signup.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["auth","faunadb","query","Client","secret","process","GoTrue","APIUrl","audience","setCookie","Signup","useState","email","setEmail","password","setPassword","signup","e","a","preventDefault","res","console","log","onSubmit","method","htmlFor","type","name","id","onChange","target","value","Home","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4OAYMA,GALIC,IAAQC,MACE,IAAID,IAAQE,OAAO,CACrCC,OAAQC,6CAGG,IAAIC,IAAO,CACtBC,OAAQ,oDACRC,SAAU,GACVC,WAAW,KAwDEC,MArDf,WAAmB,IAAD,EACUC,qBADV,mBACTC,EADS,KACFC,EADE,OAEgBF,qBAFhB,mBAETG,EAFS,KAECC,EAFD,KAgBVC,EAAM,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACbD,EAAEE,iBADW,SAEKnB,EAAKgB,OAAOJ,EAAOE,GAFxB,OAEPM,EAFO,OAGbC,QAAQC,IAAIF,GAHC,2CAAH,sDAMZ,OACE,0BACEG,SAAU,SAACN,GACTD,EAAOC,IAETO,OAAO,QAEP,2BAAOC,QAAQ,SAAf,WACA,2BACEC,KAAK,QACLC,KAAK,QACLC,GAAG,QACHC,SAAU,SAACZ,GACTJ,EAASI,EAAEa,OAAOC,UAItB,2BAAON,QAAQ,YAAf,aACA,2BACEC,KAAK,WACLC,KAAK,WACLC,GAAG,WACHC,SAAU,SAACZ,GACTF,EAAYE,EAAEa,OAAOC,UAGzB,4BAAQL,KAAK,UAAb,YC5DSM,MAJf,WACE,OAAO,sCCeMC,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,UAAUC,UAAW1B,OCA3B2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.08a707b8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n// Fauna\r\nimport faunadb from \"faunadb\";\r\n// GoTrue - user authentication library\r\nimport GoTrue from \"gotrue-js\";\r\n\r\n// Fauna\r\nconst q = faunadb.query;\r\nconst adminClient = new faunadb.Client({\r\n  secret: process.env.REACT_APP_SECRET,\r\n});\r\n// GoTrue\r\nconst auth = new GoTrue({\r\n  APIUrl: \"https://forum-wtchs.netlify.app/.netlify/identity\",\r\n  audience: \"\",\r\n  setCookie: false,\r\n});\r\n\r\nfunction Signup() {\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n\r\n  // adminClient\r\n  //   .query(\r\n  //     q.Create(q.Collection(\"users\"), {\r\n  //       data: {\r\n  //         handle: \"handle1\",\r\n  //         email: \"email1@email.com\",\r\n  //         imageUrl: \"imageUrl1.com\",\r\n  //       },\r\n  //     })\r\n  //   )\r\n  //   .then((ret) => console.log(ret));\r\n\r\n  const signup = async (e) => {\r\n    e.preventDefault();\r\n    const res = await auth.signup(email, password);\r\n    console.log(res);\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        signup(e);\r\n      }}\r\n      method=\"post\"\r\n    >\r\n      <label htmlFor=\"email\">Email: </label>\r\n      <input\r\n        type=\"email\"\r\n        name=\"email\"\r\n        id=\"email\"\r\n        onChange={(e) => {\r\n          setEmail(e.target.value);\r\n        }}\r\n      ></input>\r\n\r\n      <label htmlFor=\"Password\">Password:</label>\r\n      <input\r\n        type=\"password\"\r\n        name=\"password\"\r\n        id=\"password\"\r\n        onChange={(e) => {\r\n          setPassword(e.target.value);\r\n        }}\r\n      ></input>\r\n      <button type=\"submit\">Signup</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\n\r\nfunction Home() {\r\n  return <div>Home</div>;\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n// Components\nimport Signup from \"./components/Signup\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/signup\" component={Signup} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}