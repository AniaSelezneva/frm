{"version":3,"sources":["pages/Signup.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["q","faunadb","query","adminClient","Client","secret","process","auth","GoTrue","APIUrl","audience","setCookie","Signup","useState","email","setEmail","handle","setHandle","password","setPassword","confirmPassword","setConfirmPassword","handleUnique","setHandleUnique","emailUnique","setEmailUnique","passwordsMatch","setPasswordsMatch","signup","e","a","preventDefault","Promise","resolve","reject","Exists","Match","Index","Casefold","Create","Collection","data","imageUrl","ret","onSubmit","method","htmlFor","type","name","id","onChange","undefined","target","value","required","Home","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00b2f03c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n// Fauna\r\nimport faunadb from \"faunadb\";\r\n// GoTrue - user authentication library\r\nimport GoTrue from \"gotrue-js\";\r\n\r\n// Fauna\r\nconst q = faunadb.query;\r\nconst adminClient = new faunadb.Client({\r\n  secret: process.env.REACT_APP_SECRET,\r\n});\r\n\r\n// GoTrue\r\nconst auth = new GoTrue({\r\n  APIUrl: \"https://forum-wtchs.netlify.app/.netlify/identity\",\r\n  audience: \"\",\r\n  setCookie: false,\r\n});\r\n\r\nfunction Signup() {\r\n  const [email, setEmail] = useState();\r\n  const [handle, setHandle] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [confirmPassword, setConfirmPassword] = useState();\r\n\r\n  const [handleUnique, setHandleUnique] = useState();\r\n  const [emailUnique, setEmailUnique] = useState();\r\n  const [passwordsMatch, setPasswordsMatch] = useState();\r\n\r\n  const addUserToDb = () => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const ret = await adminClient.query(\r\n          q.Create(q.Collection(\"users\"), {\r\n            data: {\r\n              handle: handle,\r\n              email: email,\r\n              imageUrl: \"imageUrl1.com\",\r\n            },\r\n          })\r\n        );\r\n        resolve(ret);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  const isHandleUnique = () => {\r\n    return new Promise(async (resolve, reject) => {\r\n      const res = await adminClient.query(\r\n        q.Exists(q.Match(q.Index(\"users_by_handle\"), q.Casefold(handle)))\r\n      );\r\n\r\n      if (res === true) {\r\n        setHandleUnique(false);\r\n        resolve(false);\r\n      } else {\r\n        setHandleUnique(true);\r\n        resolve(true);\r\n      }\r\n    });\r\n  };\r\n\r\n  const isEmailUnique = () => {\r\n    return new Promise(async (resolve, reject) => {\r\n      const res = await adminClient.query(\r\n        q.Exists(q.Match(q.Index(\"users_by_email\"), q.Casefold(email)))\r\n      );\r\n\r\n      if (res === true) {\r\n        setEmailUnique(false);\r\n        resolve(false);\r\n      } else {\r\n        setEmailUnique(true);\r\n        resolve(true);\r\n      }\r\n    });\r\n  };\r\n\r\n  const doPasswordsMatch = () => {\r\n    if (password === confirmPassword) {\r\n      setPasswordsMatch(true);\r\n      return true;\r\n    } else {\r\n      setPasswordsMatch(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const signup = async (e) => {\r\n    e.preventDefault();\r\n    const handleUnique = await isHandleUnique();\r\n    const emailUnique = await isEmailUnique();\r\n\r\n    if (handleUnique && emailUnique && doPasswordsMatch()) {\r\n      await auth.signup(email, password);\r\n      await addUserToDb();\r\n    }\r\n\r\n    // (async () => {\r\n    //   const res = await fetch(\"/api/hey\");\r\n    //   const response = await res.json();\r\n    //   console.log(response);\r\n    // })();\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   const user = auth.currentUser();\r\n  //   console.log(user);\r\n\r\n  //   const smth = async () => {\r\n  //     const res = await fetch(\"/api/hey\");\r\n  //     const response = await res.json();\r\n  //     console.log(response);\r\n  //   };\r\n\r\n  //   smth();\r\n  // }, []);\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        signup(e);\r\n      }}\r\n      method=\"post\"\r\n    >\r\n      <label htmlFor=\"email\">Email:</label>\r\n      <input\r\n        type=\"email\"\r\n        name=\"email\"\r\n        id=\"email\"\r\n        onChange={(e) => {\r\n          setEmailUnique(undefined);\r\n          setEmail(e.target.value);\r\n        }}\r\n        required=\"required\"\r\n      ></input>\r\n\r\n      {emailUnique === false ? <p>This email is already in use</p> : null}\r\n\r\n      <label htmlFor=\"handle\">Username:</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"handle\"\r\n        id=\"handle\"\r\n        onChange={(e) => {\r\n          setHandleUnique(undefined);\r\n          setHandle(e.target.value);\r\n        }}\r\n        required=\"required\"\r\n      ></input>\r\n\r\n      {handleUnique === false ? <p>This handle is already in use</p> : null}\r\n\r\n      <label htmlFor=\"password\">Password:</label>\r\n      <input\r\n        type=\"password\"\r\n        name=\"password\"\r\n        id=\"password\"\r\n        onChange={(e) => {\r\n          setPassword(e.target.value);\r\n          setPasswordsMatch(true);\r\n        }}\r\n        required=\"required\"\r\n      ></input>\r\n\r\n      <label htmlFor=\"confirmPassword\">Confirm password:</label>\r\n      <input\r\n        type=\"password\"\r\n        name=\"confirmPassword\"\r\n        id=\"confirmPassword\"\r\n        onChange={(e) => {\r\n          setConfirmPassword(e.target.value);\r\n          setPasswordsMatch(true);\r\n        }}\r\n        required=\"required\"\r\n      ></input>\r\n      {passwordsMatch === false ? <p>Passwords don't match</p> : null}\r\n\r\n      <button type=\"submit\">Signup</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\n\r\nfunction Home() {\r\n  return <div>Home</div>;\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n// Components\nimport Signup from \"./pages/Signup\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/signup\" component={Signup} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}