{"version":3,"sources":["utils/store.js","utils/auth.js","pages/Signup.js","pages/Home.js","pages/Login.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loggedIn","user","store","createContext","Provider","StateProvider","children","useReducer","state","action","type","dispatch","value","auth","GoTrue","APIUrl","audience","setCookie","q","faunadb","query","adminClient","Client","secret","process","Signup","useContext","useState","email","setEmail","handle","setHandle","password","setPassword","confirmPassword","setConfirmPassword","handleUnique","setHandleUnique","emailUnique","setEmailUnique","passwordsMatch","setPasswordsMatch","isError","setIsError","useEffect","currentUser","undefined","signup","e","a","preventDefault","Promise","resolve","reject","Exists","Match","Index","Casefold","Create","Collection","data","imageUrl","ret","console","log","onSubmit","method","htmlFor","name","id","onChange","target","required","Home","Login","error","setError","login","message","App","exact","path","component","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9e64706e.chunk.js","sourcesContent":["import React, { createContext, useReducer } from \"react\";\r\n\r\nconst initialState = { loggedIn: false, user: null };\r\n// store has Provider and Consumer components\r\nconst store = createContext(initialState);\r\nconst { Provider } = store;\r\n\r\nconst StateProvider = ({ children }) => {\r\n  const reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case \"LOG_IN\":\r\n        return { ...state, loggedIn: true };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n};\r\n\r\nexport { store, StateProvider };\r\n\r\n// Provider sends state and dispatch to all the lower components.\r\n// Lower components will access it through useContext(store).\r\n// Store is created here.\r\n","// GoTrue - user authentication library\r\nimport GoTrue from \"gotrue-js\";\r\n\r\n// GoTrue\r\nconst auth = new GoTrue({\r\n  APIUrl: \"https://forum-wtchs.netlify.app/.netlify/identity\",\r\n  audience: \"\",\r\n  setCookie: false,\r\n});\r\n\r\nexport default auth;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\n\r\n// store\r\nimport { store } from \"../utils/store\";\r\n// Fauna\r\nimport faunadb from \"faunadb\";\r\n// auth\r\nimport auth from \"../utils/auth\";\r\n\r\n// Fauna\r\nconst q = faunadb.query;\r\nconst adminClient = new faunadb.Client({\r\n  secret: process.env.REACT_APP_SECRET,\r\n});\r\n\r\nfunction Signup() {\r\n  const { state, dispatch } = useContext(store);\r\n\r\n  const [email, setEmail] = useState();\r\n  const [handle, setHandle] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [confirmPassword, setConfirmPassword] = useState();\r\n\r\n  const [handleUnique, setHandleUnique] = useState();\r\n  const [emailUnique, setEmailUnique] = useState();\r\n  const [passwordsMatch, setPasswordsMatch] = useState();\r\n\r\n  // General error\r\n  const [isError, setIsError] = useState();\r\n\r\n  // Check if user is signed in.\r\n  useEffect(() => {\r\n    // If he is...\r\n    if (auth.currentUser() !== null && auth.currentUser() !== undefined) {\r\n      // change loggedIn property in state object.\r\n      dispatch({ type: \"LOG_IN\" });\r\n    }\r\n  }, []);\r\n\r\n  // Add user to 'users' collection in db.\r\n  const addUserToDb = () => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const ret = await adminClient.query(\r\n          q.Create(q.Collection(\"users\"), {\r\n            data: {\r\n              handle: handle,\r\n              email: email,\r\n              imageUrl: \"imageUrl1.com\",\r\n            },\r\n          })\r\n        );\r\n        resolve(ret);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Check if user handle doesn't exist in db already.\r\n  const isHandleUnique = () => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const res = await adminClient.query(\r\n          q.Exists(q.Match(q.Index(\"users_by_handle\"), q.Casefold(handle)))\r\n        );\r\n\r\n        if (res === true) {\r\n          setHandleUnique(false);\r\n          resolve(false);\r\n        } else {\r\n          setHandleUnique(true);\r\n          resolve(true);\r\n        }\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Check if user email doesn't exist in db already.\r\n  const isEmailUnique = () => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const res = await adminClient.query(\r\n          q.Exists(q.Match(q.Index(\"users_by_email\"), q.Casefold(email)))\r\n        );\r\n\r\n        if (res === true) {\r\n          setEmailUnique(false);\r\n          resolve(false);\r\n        } else {\r\n          setEmailUnique(true);\r\n          resolve(true);\r\n        }\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Check if password and confirmPassword match.\r\n  const doPasswordsMatch = () => {\r\n    if (password === confirmPassword) {\r\n      setPasswordsMatch(true);\r\n      return true;\r\n    } else {\r\n      setPasswordsMatch(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const signup = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const handleUnique = await isHandleUnique();\r\n      const emailUnique = await isEmailUnique();\r\n\r\n      if (handleUnique && emailUnique && doPasswordsMatch()) {\r\n        await auth.signup(email, password);\r\n        await addUserToDb();\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      setIsError(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        signup(e);\r\n      }}\r\n      method=\"post\"\r\n    >\r\n      <label htmlFor=\"email\">Email:</label>\r\n      <input\r\n        type=\"email\"\r\n        name=\"email\"\r\n        id=\"email\"\r\n        onChange={(e) => {\r\n          setEmailUnique(undefined);\r\n          setIsError(false);\r\n          setEmail(e.target.value);\r\n        }}\r\n        required=\"required\"\r\n      ></input>\r\n\r\n      {emailUnique === false ? <p>This email is already in use</p> : null}\r\n\r\n      <label htmlFor=\"handle\">Username:</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"handle\"\r\n        id=\"handle\"\r\n        onChange={(e) => {\r\n          setHandleUnique(undefined);\r\n          setIsError(false);\r\n          setHandle(e.target.value);\r\n        }}\r\n        required=\"required\"\r\n      ></input>\r\n\r\n      {handleUnique === false ? <p>This handle is already in use</p> : null}\r\n\r\n      <label htmlFor=\"password\">Password:</label>\r\n      <input\r\n        type=\"password\"\r\n        name=\"password\"\r\n        id=\"password\"\r\n        onChange={(e) => {\r\n          setPassword(e.target.value);\r\n          setIsError(false);\r\n          setPasswordsMatch(true);\r\n        }}\r\n        required=\"required\"\r\n      ></input>\r\n\r\n      <label htmlFor=\"confirmPassword\">Confirm password:</label>\r\n      <input\r\n        type=\"password\"\r\n        name=\"confirmPassword\"\r\n        id=\"confirmPassword\"\r\n        onChange={(e) => {\r\n          setConfirmPassword(e.target.value);\r\n          setIsError(false);\r\n          setPasswordsMatch(true);\r\n        }}\r\n        required=\"required\"\r\n      ></input>\r\n      {passwordsMatch === false ? <p>Passwords don't match</p> : null}\r\n\r\n      {isError && <p>Error occured, please try again later</p>}\r\n\r\n      <button type=\"submit\">Signup</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n","import React, { useEffect } from \"react\";\r\n// GoTrue - user authentication library\r\nimport GoTrue from \"gotrue-js\";\r\n\r\nconst auth = new GoTrue({\r\n  APIUrl: \"https://forum-wtchs.netlify.app/.netlify/identity\",\r\n  audience: \"\",\r\n  setCookie: false,\r\n});\r\n\r\nfunction Home() {\r\n  useEffect(() => {\r\n    console.log(auth.currentUser());\r\n  }, []);\r\n\r\n  return <div>Home</div>;\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\n// store\r\nimport { store } from \"../utils/store\";\r\n// auth\r\nimport auth from \"../utils/auth\";\r\n\r\nfunction Login() {\r\n  const { state, dispatch } = useContext(store);\r\n\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [error, setError] = useState(undefined);\r\n\r\n  // Check if user is signed in.\r\n  useEffect(() => {\r\n    // If he is...\r\n    if (auth.currentUser() !== null && auth.currentUser() !== undefined) {\r\n      // change loggedIn property in state object.\r\n      dispatch({ type: \"LOG_IN\" });\r\n    }\r\n  }, []);\r\n\r\n  // Login\r\n  const login = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await auth.login(email, password, true);\r\n      dispatch({ type: \"LOG_IN\" });\r\n    } catch (error) {\r\n      if (error.message == \"invalid_grant: Email not confirmed\") {\r\n        setError(\"Email not confirmed\");\r\n      } else if (\r\n        error.message ==\r\n        \"invalid_grant: No user found with that email, or password invalid.\"\r\n      ) {\r\n        setError(\"No user found with that email, or password invalid\");\r\n      } else {\r\n        setError(\"Error occured, please try again later\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        login(e);\r\n      }}\r\n      method=\"post\"\r\n    >\r\n      <label htmlFor=\"email\">Email:</label>\r\n      <input\r\n        type=\"email\"\r\n        name=\"email\"\r\n        id=\"email\"\r\n        onChange={(e) => {\r\n          setEmail(e.target.value);\r\n          setError(undefined);\r\n        }}\r\n        required=\"required\"\r\n      ></input>\r\n\r\n      <label htmlFor=\"password\">Password:</label>\r\n      <input\r\n        type=\"password\"\r\n        name=\"password\"\r\n        id=\"password\"\r\n        onChange={(e) => {\r\n          setPassword(e.target.value);\r\n          setError(undefined);\r\n        }}\r\n        required=\"required\"\r\n      ></input>\r\n\r\n      {error !== undefined && <p>{error}</p>}\r\n\r\n      <button type=\"submit\">Signup</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useContext } from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n// Components\nimport Signup from \"./pages/Signup\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\n// Store\nimport { store } from \"./utils/store\";\n\nfunction App() {\n  const { state, dispatch } = useContext(store);\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/signup\" component={Signup}>\n          {state.loggedIn && <Redirect to=\"/\" />}\n        </Route>\n        <Route path=\"/login\" component={Login} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// State provider\nimport { StateProvider } from \"./utils/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}